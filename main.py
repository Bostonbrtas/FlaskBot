
import os
import logging
import requests
from datetime import datetime
from dotenv import load_dotenv
from geopy.distance import geodesic

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from app import app, db
from models import User, Project, Report, ReportPhoto

app.app_context().push()
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE_CHOOSE = "choose_project"
STATE_READY = "ready_to_start"
STATE_WAIT_LOC = "waiting_location"
STATE_WORKING = "working"
STATE_WAIT_TEXT = "waiting_text"
STATE_WAIT_PHOTOS = "waiting_photos"

# –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}

def finish_report_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text = "‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="finish_report"))
    return keyboard

# –ì–µ–æ-–∫–Ω–æ–ø–∫–∞
loc_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
    resize_keyboard=True
)


def upload_to_yadisk(project_name, telegram_id, file_bytes, filename):
    token = os.getenv("YADISK_TOKEN")
    headers = {"Authorization": f"OAuth {token}"}

    safe_project_name = project_name.replace(" ", "_").replace("/", "_")
    root_folder = safe_project_name
    user_folder = f"{safe_project_name}/{telegram_id}"
    remote_path = f"{user_folder}/{filename}"

    folder_url = "https://cloud-api.yandex.net/v1/disk/resources"
    requests.put(folder_url, headers=headers, params={"path": root_folder})
    requests.put(folder_url, headers=headers, params={"path": user_folder})

    response = requests.get(
        f"{folder_url}/upload",
        headers=headers,
        params={"path": remote_path, "overwrite": "true"}
    )

    if response.status_code != 200:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ upload_url:", response.status_code, response.text)
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")

    upload_url = response.json().get("href")
    requests.put(upload_url, data=file_bytes)

    return f"https://disk.yandex.ru/client/disk/{user_folder}"


def fix_auto_report_if_needed(chat):
    data = user_states.get(chat, {}).get("data", {})
    if data.get("start_time") and data.get("project_id"):
        user = db.session.query(User).filter_by(telegram_id=str(chat)).first()
        if not user:
            return

        existing = db.session.query(Report).filter_by(
            user_id=user.id,
            project_id=data["project_id"],
            start_time=data["start_time"]
        ).first()

        if existing:
            return

        report = Report(
            user_id=user.id,
            project_id=data["project_id"],
            start_time=data["start_time"],
            end_time=datetime.now(),
            text_report=None,
            photo_link=None
        )
        db.session.add(report)
        db.session.commit()


def reset_state(chat):
    fix_auto_report_if_needed(chat)
    if chat in user_states:
        del user_states[chat]


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat = message.chat.id
    reset_state(chat)

    tid = str(message.from_user.id)
    user = db.session.query(User).filter_by(telegram_id=tid, is_active=True).first()
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    projects = db.session.query(Project).all()
    builder = ReplyKeyboardBuilder()
    for p in projects:
        builder.add(KeyboardButton(text=f"{p.name}, {p.address}"))
    builder.adjust(1)

    user_states[chat] = {"state": STATE_CHOOSE, "data": {
        "projects": {f"{p.name}, {p.address}": p.id for p in projects}
    }}

    await message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message()
async def AllMessage(message: types.Message):
    chat = message.chat.id
    text = message.text or ""
    state = user_states.get(chat, {}).get("state")
    data = user_states.setdefault(chat, {}).setdefault("data", {})

    if state == STATE_CHOOSE:
        projects = data["projects"]
        if text not in projects:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π.")
            return

        pid = projects[text]
        proj = db.session.get(Project, pid)
        data["project_id"] = pid
        data["ask_location"] = proj.ask_location

        if proj.ask_location:
            user_states[chat]["state"] = STATE_READY
            await message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç. –ù–∞–∂–º–∏—Ç–µ üèÅ –ù–∞—á–∞—Ç—å",
                                 reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üèÅ –ù–∞—á–∞—Ç—å")]],
                                                                  resize_keyboard=True))
        else:
            data["start_time"] = datetime.now()  # ‚úÖ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –≥–µ–æ
            user_states[chat]["state"] = STATE_WORKING
            await message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç. –ù–∞–∂–º–∏—Ç–µ üìù –û—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ.",
                                 reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìù –û—Ç—á–µ—Ç")]],
                                                                  resize_keyboard=True))
        return

    if state == STATE_READY and text == "üèÅ –ù–∞—á–∞—Ç—å":
        data["start_time"] = datetime.now()  # ‚úÖ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
        proj = db.session.get(Project, data["project_id"])
        data["target_coords"] = (proj.latitude, proj.longitude)
        user_states[chat]["state"] = STATE_WAIT_LOC
        await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=loc_kb)
        return

    if state == STATE_WAIT_LOC and message.location:
        target = data["target_coords"]
        current = (message.location.latitude, message.location.longitude)
        dist = geodesic(target, current).meters
        if dist <= 250:
            user_states[chat]["state"] = STATE_WORKING
            await message.answer("‚úÖ –í—ã –Ω–∞ –º–µ—Å—Ç–µ! –ù–∞–∂–º–∏—Ç–µ üìù –û—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text = "üìù –û—Ç—á–µ—Ç")]], resize_keyboard=True))
        else:
            await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {dist:.0f} –º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=loc_kb)
        return

    if state == STATE_WORKING and text == "üìù –û—Ç—á–µ—Ç":
        user_states[chat]["state"] = STATE_WAIT_TEXT
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        return

    if state == STATE_WAIT_TEXT and text:
        data["text_report"] = text
        data["photo_paths"] = []
        user_states[chat]["state"] = STATE_WAIT_PHOTOS

        finish_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")]],
            resize_keyboard=True
        )
        await message.answer(
            "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–æ—Ç—á–µ—Ç. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'.",
            reply_markup=finish_kb
        )
        return

    if state == STATE_WAIT_PHOTOS and message.photo:
        uid = db.session.query(User).filter_by(telegram_id=str(message.from_user.id)).first().id
        telegram_id = message.from_user.id
        project = db.session.get(Project, data["project_id"])

        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_bytes = await bot.download_file(file.file_path)

        filename = f"{photo.file_id}.jpg"
        remote_url = upload_to_yadisk(project.name, telegram_id, file_bytes, filename)

        data.setdefault("uploaded_photos", []).append(f"{project.name}/{telegram_id}/{filename}")

        await message.answer(f"üì∑ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –í—Å–µ–≥–æ: {len(data['uploaded_photos'])}")
        return

    if state == STATE_WAIT_PHOTOS and message.text == "‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        uid = db.session.query(User).filter_by(telegram_id=str(message.from_user.id)).first().id
        project = db.session.get(Project, data["project_id"])

        safe_project_name = project.name.replace(" ", "_").replace("/", "_")
        photo_link = f"https://disk.yandex.ru/client/disk/{safe_project_name}/{message.from_user.id}"

        report = Report(
            user_id=uid,
            project_id=project.id,
            start_time=data.get("start_time") or datetime.now(),
            end_time=datetime.now(),
            text_report=data["text_report"],
            photo_link=photo_link
        )
        db.session.add(report)
        db.session.flush()

        for path in data.get("uploaded_photos", []):
            db.session.add(ReportPhoto(report_id=report.id, photo_path=path))

        db.session.commit()
        user_states[chat]["data"].pop("start_time", None)
        await message.answer("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=ReplyKeyboardRemove())
        reset_state(chat)
        return

    if state == STATE_WAIT_PHOTOS and message.text:
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'.")
        return

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ /start")


def start():
    import asyncio
    asyncio.run(dp.start_polling(bot))

if __name__ == "__main__":
    start()
