import os
from dotenv import load_dotenv
import logging
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from geopy.distance import geodesic
from datetime import datetime

from app import app, db

app.app_context().push()
from models import User, Project, Report

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: chat_id -> {state:str, data:dict}
user_states = {}

# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_CHOOSE = "choose_project"
STATE_READY = "ready_to_start"
STATE_WAIT_LOC = "waiting_location"
STATE_WORKING = "working"
STATE_WAIT_TEXT = "waiting_text"
STATE_WAIT_PHOTO = "waiting_photo"

# –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
loc_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
    resize_keyboard=True
)

def reset_state(chat_id: int):
    user_states[chat_id] = {"state": None, "data": {}}


from aiogram.utils.keyboard import ReplyKeyboardBuilder

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat = message.chat.id
    reset_state(chat)

    tid = str(message.from_user.id)
    logger.info(f"[START] Chat={chat}, UserID={tid}")

    user = db.session.query(User).filter_by(telegram_id=tid, is_active=True).first()
    if not user:
        await message.answer(
            f"‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
            parse_mode="HTML"
        )
        return

    projects = db.session.query(Project).all()
    if not projects:
        await message.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ Builder
    builder = ReplyKeyboardBuilder()
    for p in projects:
        text = f"{p.city}, {p.street}, {p.building}"
        builder.add(KeyboardButton(text=text))
    builder.adjust(1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    user_states[chat]["state"] = STATE_CHOOSE
    user_states[chat]["data"]["projects"] = {
        f"{p.city}, {p.street}, {p.building}": p.id for p in projects
    }

    await message.answer(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

from aiogram.types import KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

@dp.message()
async def all_messages(message: types.Message):
    chat = message.chat.id
    st = user_states.get(chat, {"state": None})["state"]
    text = message.text or ""

    # 1) –í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞
    if st == STATE_CHOOSE:
        proj_map = user_states[chat]["data"]["projects"]
        if text not in proj_map:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π.")
            return

        pid = proj_map[text]
        proj = db.session.get(Project, pid)
        user_states[chat]["data"]["project_id"] = pid
        user_states[chat]["data"]["ask_location"] = proj.ask_location

        if proj.ask_location:
            user_states[chat]["state"] = STATE_READY
            builder = ReplyKeyboardBuilder()
            builder.add(KeyboardButton(text="üèÅ –ù–∞—á–∞—Ç—å")).adjust(1)
            await message.answer(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{text}</b>\n–ù–∞–∂–º–∏—Ç–µ ¬´üèÅ –ù–∞—á–∞—Ç—å¬ª",
                parse_mode="HTML",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
        else:
            user_states[chat]["state"] = STATE_WORKING
            builder = ReplyKeyboardBuilder()
            builder.add(KeyboardButton(text="üìù –û—Ç—á–µ—Ç")).adjust(1)
            await message.answer(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{text}</b>\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ ¬´üìù –û—Ç—á–µ—Ç¬ª",
                parse_mode="HTML",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
        return

    # 2) ¬´üèÅ –ù–∞—á–∞—Ç—å¬ª
    if st == STATE_READY and text in ["üèÅ –ù–∞—á–∞—Ç—å", "–ù–∞—á–∞—Ç—å"]:
        pid = user_states[chat]["data"]["project_id"]
        proj = db.session.get(Project, pid)
        user_states[chat]["data"]["target_coords"] = (proj.latitude, proj.longitude)
        user_states[chat]["state"] = STATE_WAIT_LOC

        await message.answer(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=loc_kb
        )
        return

    # 3) –ü–æ–ª—É—á–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é
    if st == STATE_WAIT_LOC and message.location:
        tgt = user_states[chat]["data"]["target_coords"]
        loc = (message.location.latitude, message.location.longitude)
        dist = geodesic(tgt, loc).meters
        if dist <= 250:
            user_states[chat]["data"]["start_time"] = datetime.now()
            user_states[chat]["state"] = STATE_WORKING

            # –ö–Ω–æ–ø–∫–∞ ¬´üìù –û—Ç—á–µ—Ç¬ª
            builder = ReplyKeyboardBuilder()
            builder.add(KeyboardButton(text="üìù –û—Ç—á–µ—Ç")).adjust(1)
            await message.answer(
                "‚úÖ –í—ã –Ω–∞ –º–µ—Å—Ç–µ! –ù–∞–∂–º–∏—Ç–µ ¬´üìù –û—Ç—á–µ—Ç¬ª –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è.",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
        else:
            await message.answer(
                f"‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {dist:.0f} –º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=loc_kb
            )
        return

    # 4) ¬´üìù –û—Ç—á–µ—Ç¬ª ‚Äî —Ç–µ–∫—Å—Ç
    if st == STATE_WORKING and text in ["üìù –û—Ç—á–µ—Ç", "–û—Ç—á–µ—Ç"]:
        user_states[chat]["state"] = STATE_WAIT_TEXT
        await message.answer("üìã –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        return

    # 5) –¢–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    if st == STATE_WAIT_TEXT and text:
        user_states[chat]["data"]["text_report"] = text
        user_states[chat]["state"] = STATE_WAIT_PHOTO
        await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å –æ–±—ä–µ–∫—Ç–∞.")
        return

    # 6) –§–æ—Ç–æ –æ—Ç—á—ë—Ç–∞
    if st == STATE_WAIT_PHOTO and message.photo:
        data = user_states[chat]["data"]
        uid = db.session.query(User).filter_by(telegram_id=str(message.from_user.id)).first().id
        pid = data["project_id"]

        BASE = os.path.dirname(os.path.abspath(__file__))
        folder = os.path.join(BASE, "static", "reports")
        os.makedirs(folder, exist_ok=True)
        photo = message.photo[-1]
        finfo = await bot.get_file(photo.file_id)
        path = os.path.join(folder, f"{photo.file_id}.jpg")
        await bot.download_file(finfo.file_path, path)

        start = data.get("start_time") or datetime.now()

        report = Report(
            user_id=uid,
            project_id=pid,
            start_time=start,
            end_time=datetime.now(),
            text_report=data["text_report"],
            photo_path=f"reports/{photo.file_id}.jpg"
        )
        db.session.add(report)
        db.session.commit()

        await message.answer("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=ReplyKeyboardRemove())
        reset_state(chat)
        return

    # 7) –§–æ–ª–ª–±–µ–∫–∏ (–Ω–∏ –≤ –æ–¥–Ω–æ–π –≤–µ—Ç–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–∞–ø—Ä—è–º—É—é)
    if st is None:
        await message.answer("‚ùå –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    else:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º.")

async def main():
    # –°–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    with app.app_context():
        db.create_all()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())