import time
import os
import logging
import requests
from datetime import datetime
from dotenv import load_dotenv
from geopy.distance import geodesic
from urllib.parse import quote

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InputMediaPhoto, InputMediaDocument


from app import app, db
from models import User, Project, Report, ReportPhoto


app.app_context().push()
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE_CHOOSE = "choose_project"
STATE_READY = "ready_to_start"
STATE_WAIT_LOC = "waiting_location"
STATE_WORKING = "working"
STATE_WAIT_TEXT = "waiting_text"
STATE_WAIT_PHOTOS = "waiting_photos"

# –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}

def finish_report_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text = "‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="finish_report"))
    return keyboard

# –ì–µ–æ-–∫–Ω–æ–ø–∫–∞
loc_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
    resize_keyboard=True
)

def upload_to_yadisk(project_name: str, telegram_id: int, file_bytes: bytes, filename: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ø.–î–∏—Å–∫ –≤ –ø–∞–ø–∫—É –û—Ç—á—ë—Ç—ã/–ü—Ä–æ–µ–∫—Ç/–î–∞—Ç–∞/–§–ò–û –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å —ç—Ç–æ–π –ø–∞–ø–∫–∏.
    """
    token = os.getenv("YADISK_TOKEN")
    headers = {"Authorization": f"OAuth {token}"}

    common_root = "–û—Ç—á—ë—Ç—ã"
    safe_proj   = project_name.replace(" ", "_").replace("/", "_")
    date_folder = datetime.now().date().isoformat()
    user = db.session.query(User).filter_by(telegram_id=str(telegram_id)).first()
    surname = user.surname.replace(" ", "_") if user and user.surname else str(telegram_id)

    last_folder = f"{common_root}/{safe_proj}/{date_folder}/{surname}"

    # —Å–æ–∑–¥–∞—ë–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø–∞–ø–æ–∫
    for path in [
        common_root,
        f"{common_root}/{safe_proj}",
        f"{common_root}/{safe_proj}/{date_folder}",
        last_folder
    ]:
        requests.put(
            "https://cloud-api.yandex.net/v1/disk/resources",
            headers=headers,
            params={"path": path}
        )

    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    upload_resp = requests.get(
        "https://cloud-api.yandex.net/v1/disk/resources/upload",
        headers=headers,
        params={"path": f"{last_folder}/{filename}", "overwrite": "true"}
    )
    upload_resp.raise_for_status()
    upload_url = upload_resp.json()["href"]
    requests.put(upload_url, data=file_bytes)

    return last_folder



def finalize_report(last_folder: str) -> str | None:
    """
    –î–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω–æ–π —Ç–æ–ª—å–∫–æ —ç—Ç—É –ø–∞–ø–∫—É last_folder
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—ë.
    """
    if not last_folder:
        return None

    token = os.getenv("YADISK_TOKEN")
    headers = {"Authorization": f"OAuth {token}"}
    base_url = "https://cloud-api.yandex.net/v1/disk/resources"

    # 1) –ü—É–±–ª–∏–∫—É–µ–º –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    publish_resp = requests.put(
        f"{base_url}/publish",
        headers=headers,
        params={"path": last_folder}
    )
    publish_resp.raise_for_status()

    # 2) –ü–æ–ª—É—á–∞–µ–º public_url —ç—Ç–æ–π –∂–µ –ø–∞–ø–∫–∏
    info_resp = requests.get(
        base_url,
        headers=headers,
        params={"path": last_folder, "fields": "public_url"}
    )
    info_resp.raise_for_status()
    return info_resp.json().get("public_url")

def fix_auto_report_if_needed(chat):
    data = user_states.get(chat, {}).get("data", {})
    if data.get("start_time") and data.get("project_id"):
        user = db.session.query(User).filter_by(telegram_id=str(chat)).first()
        if not user:
            return

        existing = db.session.query(Report).filter_by(
            user_id=user.id,
            project_id=data["project_id"],
            start_time=data["start_time"]
        ).first()

        if existing:
            return

        report = Report(
            user_id=user.id,
            project_id=data["project_id"],
            start_time=data["start_time"],
            end_time=datetime.now(),
            text_report=None,
            photo_link=None
        )
        db.session.add(report)
        db.session.commit()


def reset_state(chat):
    fix_auto_report_if_needed(chat)
    if chat in user_states:
        del user_states[chat]


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat = message.chat.id
    reset_state(chat)

    tid = str(message.from_user.id)
    # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user = db.session.query(User).filter_by(
        telegram_id=tid,
        is_active=True,
        archived=False
    ).first()
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –±—ã–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∞—Ä—Ö–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    projects = db.session.query(Project).filter_by(archived=False).all()
    builder = ReplyKeyboardBuilder()
    for p in projects:
        builder.add(KeyboardButton(text=f"{p.name}, {p.address}"))
    builder.adjust(1)

    user_states[chat] = {
        "state": STATE_CHOOSE,
        "data": {"projects": {f"{p.name}, {p.address}": p.id for p in projects}}
    }

    await message.answer(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@dp.message()
async def AllMessage(message: types.Message):
    chat = message.chat.id
    text = message.text or ""
    state = user_states.get(chat, {}).get("state")
    data = user_states.setdefault(chat, {}).setdefault("data", {})

    if state == STATE_CHOOSE:
        projects = data["projects"]
        if text not in projects:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π.")
            return

        pid = projects[text]
        proj = db.session.get(Project, pid)
        data["project_id"] = pid
        data["ask_location"] = proj.ask_location

        if proj.ask_location:
            user_states[chat]["state"] = STATE_READY
            await message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç. –ù–∞–∂–º–∏—Ç–µ üèÅ –ù–∞—á–∞—Ç—å",
                                 reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üèÅ –ù–∞—á–∞—Ç—å")]],
                                                                  resize_keyboard=True))
        else:
            data["start_time"] = datetime.now()  # ‚úÖ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –≥–µ–æ
            user_states[chat]["state"] = STATE_WORKING
            await message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç. –ù–∞–∂–º–∏—Ç–µ üìù –û—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ.",
                                 reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìù –û—Ç—á–µ—Ç")]],
                                                                  resize_keyboard=True))
        return

    if state == STATE_READY and text == "üèÅ –ù–∞—á–∞—Ç—å":
        data["start_time"] = datetime.now()  # ‚úÖ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
        proj = db.session.get(Project, data["project_id"])
        data["target_coords"] = (proj.latitude, proj.longitude)
        user_states[chat]["state"] = STATE_WAIT_LOC
        await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=loc_kb)
        return

    if state == STATE_WAIT_LOC and message.location:
        target = data["target_coords"]
        current = (message.location.latitude, message.location.longitude)
        dist = geodesic(target, current).meters
        if dist <= 250:
            user_states[chat]["state"] = STATE_WORKING
            await message.answer("‚úÖ –í—ã –Ω–∞ –º–µ—Å—Ç–µ! –ù–∞–∂–º–∏—Ç–µ üìù –û—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text = "üìù –û—Ç—á–µ—Ç")]], resize_keyboard=True))
        else:
            await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {dist:.0f} –º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=loc_kb)
        return

    if state == STATE_WORKING and text == "üìù –û—Ç—á–µ—Ç":
        user_states[chat]["state"] = STATE_WAIT_TEXT
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        return

    if state == STATE_WAIT_TEXT and text:
        data["text_report"] = text
        data["photo_paths"] = []
        user_states[chat]["state"] = STATE_WAIT_PHOTOS

        finish_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")]],
            resize_keyboard=True
        )
        await message.answer(
            "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–æ—Ç—á–µ—Ç. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'.",
            reply_markup=finish_kb
        )
        return

    # –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û –ò –õ–Æ–ë–´–• –î–û–ö–£–ú–ï–ù–¢–û–í
    if state == STATE_WAIT_PHOTOS and (message.photo or message.document):
        if message.photo:
            file_obj = message.photo[-1]
            kind = 'photo'
            filename = "–§–æ—Ç–æ"
        else:
            file_obj = message.document
            kind = 'document'
            filename = message.document.file_name or file_obj.file_id

        file_info = await bot.get_file(file_obj.file_id)
        file_bytes = await bot.download_file(file_info.file_path)

        project = db.session.get(Project, data["project_id"])
        telegram_id = message.from_user.id
        last_folder = upload_to_yadisk(project.name, telegram_id, file_bytes, filename)
        data["last_user_folder"] = last_folder

        relpath = f"{last_folder}/{filename}"
        data.setdefault("uploaded_photos", []).append(relpath)
        data.setdefault("media_to_send", []).append((kind, file_obj.file_id))

        total = len(data["media_to_send"])
        await message.answer(f"üìé –§–∞–π–ª ¬´{filename}¬ª –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Å–µ–≥–æ: {total}")
        return

    if state == STATE_WAIT_PHOTOS and text == "‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        user_record = db.session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
        proj = db.session.get(Project, data["project_id"])
        last_folder = data.get("last_user_folder")
        public_url = finalize_report(last_folder)

        report = Report(
            user_id=user_record.id,
            project_id=proj.id,
            start_time=data["start_time"],
            end_time=datetime.now(),
            text_report=data.get("text_report"),
            photo_link=public_url
        )
        db.session.add(report)
        db.session.flush()
        for rel in data.get("uploaded_photos", []):
            db.session.add(ReportPhoto(report_id=report.id, photo_path=rel))
        db.session.commit()

        user_record = db.session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
        project = db.session.get(Project, data["project_id"])
        msg = (
            f"üìù <b>–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω</b>\n"
            f"üí¨ Telegram ID: {user_record.telegram_id}\n"
            f"üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_record.surname} {user_record.name}\n"
            f"üè¢ –û–±—ä–µ–∫—Ç: {project.name}\n"
            f"üïë –Ω–∞—á–∞–ª–æ: {report.start_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üïë –∫–æ–Ω–µ—Ü: {report.end_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚úèÔ∏è –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞: {report.text_report or '‚Äî'}\n"
            f"–§–æ—Ç–æ:"
        )
        responsible = db.session.get(User, proj.responsible_id)
        if responsible and responsible.telegram_id:
            target_chat = int(-)
            if target_chat != message.from_user.id:
                await bot.send_message(
                    chat_id=target_chat,
                    text=msg,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )

                # 2) —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ media_to_send –ø–æ —Ç–∏–ø—É
                photos = [
                    InputMediaPhoto(media=file_id)
                    for kind, file_id in data.get("media_to_send", [])
                    if kind == "photo"
                ]
                docs = [
                    InputMediaDocument(media=file_id)
                    for kind, file_id in data.get("media_to_send", [])
                    if kind == "document"
                ]

                # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if photos:
                    await bot.send_media_group(chat_id=target_chat, media=photos)

                # 4) –ø–æ—Ç–æ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if docs:
                    await bot.send_media_group(chat_id=target_chat, media=docs)

        await message.answer("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        reset_state(chat)
        return

    if state == STATE_WAIT_PHOTOS and message.text:
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'.")
        return

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ /start")


def start():
    import asyncio
    asyncio.run(dp.start_polling(bot))

if __name__ == "__main__":
    start()
