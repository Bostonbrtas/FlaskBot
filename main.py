
import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from geopy.distance import geodesic

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from app import app, db
from models import User, Project, Report, ReportPhoto

app.app_context().push()
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE_CHOOSE = "choose_project"
STATE_READY = "ready_to_start"
STATE_WAIT_LOC = "waiting_location"
STATE_WORKING = "working"
STATE_WAIT_TEXT = "waiting_text"
STATE_WAIT_PHOTO_COUNT = "waiting_photo_count"
STATE_WAIT_PHOTOS = "waiting_photos"

# –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}

# –ì–µ–æ-–∫–Ω–æ–ø–∫–∞
loc_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
    resize_keyboard=True
)

def reset_state(chat_id):
    user_states.pop(chat_id, None)

def save_photo(telegram_id, file_id):
    folder = os.path.join("static", "reports", str(telegram_id))
    os.makedirs(folder, exist_ok=True)
    path = os.path.join(folder, f"{file_id}.jpg")
    rel = f"reports/{telegram_id}/{file_id}.jpg"
    return path, rel

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat = message.chat.id
    reset_state(chat)

    tid = str(message.from_user.id)
    user = db.session.query(User).filter_by(telegram_id=tid, is_active=True).first()
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    projects = db.session.query(Project).all()
    builder = ReplyKeyboardBuilder()
    for p in projects:
        builder.add(KeyboardButton(text=f"{p.name}, {p.address}"))
    builder.adjust(1)

    user_states[chat] = {"state": STATE_CHOOSE, "data": {
        "projects": {f"{p.name}, {p.address}": p.id for p in projects}
    }}

    await message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message()
async def AllMessage(message: types.Message):
    chat = message.chat.id
    text = message.text or ""
    state = user_states.get(chat, {}).get("state")
    data = user_states.setdefault(chat, {}).setdefault("data", {})

    if state == STATE_CHOOSE:
        projects = data["projects"]
        if text not in projects:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π.")
            return

        pid = projects[text]
        proj = db.session.get(Project, pid)
        data["project_id"] = pid
        data["ask_location"] = proj.ask_location

        if proj.ask_location:
            user_states[chat]["state"] = STATE_READY
            await message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç. –ù–∞–∂–º–∏—Ç–µ üèÅ –ù–∞—á–∞—Ç—å", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üèÅ –ù–∞—á–∞—Ç—å")]], resize_keyboard=True))
        else:
            user_states[chat]["state"] = STATE_WORKING
            await message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç. –ù–∞–∂–º–∏—Ç–µ üìù –û—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìù –û—Ç—á–µ—Ç")]], resize_keyboard=True))
        return

    if state == STATE_READY and text == "üèÅ –ù–∞—á–∞—Ç—å":
        proj = db.session.get(Project, data["project_id"])
        data["target_coords"] = (proj.latitude, proj.longitude)
        user_states[chat]["state"] = STATE_WAIT_LOC
        await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=loc_kb)
        return

    if state == STATE_WAIT_LOC and message.location:
        target = data["target_coords"]
        current = (message.location.latitude, message.location.longitude)
        dist = geodesic(target, current).meters
        if dist <= 250:
            data["start_time"] = datetime.now()
            user_states[chat]["state"] = STATE_WORKING
            await message.answer("‚úÖ –í—ã –Ω–∞ –º–µ—Å—Ç–µ! –ù–∞–∂–º–∏—Ç–µ üìù –û—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text = "üìù –û—Ç—á–µ—Ç")]], resize_keyboard=True))
        else:
            await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {dist:.0f} –º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=loc_kb)
        return

    if state == STATE_WORKING and text == "üìù –û—Ç—á–µ—Ç":
        user_states[chat]["state"] = STATE_WAIT_TEXT
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        return

    if state == STATE_WAIT_TEXT and text:
        data["text_report"] = text
        user_states[chat]["state"] = STATE_WAIT_PHOTO_COUNT
        await message.answer("üì∏ –°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
        return

    if state == STATE_WAIT_PHOTO_COUNT and text.isdigit():
        count = int(text)
        if count < 1:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        data["photo_total"] = count
        data["photo_received"] = 0
        data["photo_paths"] = []
        user_states[chat]["state"] = STATE_WAIT_PHOTOS
        await message.answer(f"üì§ –ñ–¥—É {count} —Ñ–æ—Ç–æ.")
        return

    if state == STATE_WAIT_PHOTOS and message.photo:
        uid = db.session.query(User).filter_by(telegram_id=str(message.from_user.id)).first().id
        telegram_id = message.from_user.id

        # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        path, rel = save_photo(telegram_id, photo.file_id)
        await bot.download_file(file.file_path, path)
        data["photo_paths"].append(rel)

        total = data["photo_total"]
        recvd = len(data["photo_paths"])

        if recvd >= total:
            report = Report(
                user_id=uid,
                project_id=data["project_id"],
                start_time=data.get("start_time") or datetime.now(),
                end_time=datetime.now(),
                text_report=data["text_report"]
            )
            db.session.add(report)
            db.session.flush()

            for rel in data["photo_paths"]:
                db.session.add(ReportPhoto(report_id=report.id, photo_path=rel))

            db.session.commit()
            await message.answer("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=ReplyKeyboardRemove())
            reset_state(chat)
        else:
            await message.answer(f"üì∑ –§–æ—Ç–æ {recvd} –∏–∑ {total}, –∂–¥—É –µ—â–µ...")
        return

    await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ /start")

def start():
    import asyncio
    asyncio.run(dp.start_polling(bot))

if __name__ == "__main__":
    start()
